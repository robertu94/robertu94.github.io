<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Systems++</title><link>https://robertu94.github.io/learning/</link><description>Recent content on Systems++</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 09 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://robertu94.github.io/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning to Learn: Software Teams</title><link>https://robertu94.github.io/learning/software_for_teams/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://robertu94.github.io/learning/software_for_teams/</guid><description>&lt;p>Outside of school very seldom in software development will you completely work alone on a project.
Leading and being an effective member of a software team will be critical to your success in this field.
However each team and project is different.
Some projects have a high iteration cost because testing could cause people to die (e.g. bugs in rocket guidance systems in manned space flight), testing could be lengthy (e.g. if you need to manufacture a physical thing), or expensive resources are consumed (e.g. issues that only manifest when using 1000 nodes) and have to be more planning focused.
Other line of business or research applications can afford to be more iterative.
Knowing which situation you are in is key to crafting your process to be more effective.
Regardless, there are some timeless principles of teams which are important to consider when working in or leading a team.
In this post, I will highlight what research says makes effective teams and highlight how one popular approach implements these principles.&lt;/p></description></item><item><title>Learning to Learn: Software Development on Linux</title><link>https://robertu94.github.io/learning/development/</link><pubDate>Sun, 22 Jan 2023 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/development/</guid><description>&lt;p>What is software development?
At a most basic level, it is the activity of using a programming language to achieve some set of goals over time.
It includes everything from scripts that a graduate student might write to analyze some data to massive systems that control aircraft.
As our world continues to progress technically, software development will likely become even more commonplace than it is now.
In this post, I aim to provide a comprehensive overview of how one can develop software efficiently using free and open source tools on Linux.&lt;/p></description></item><item><title>Learning to Learn: Task Management, Time Tracking, and Journaling</title><link>https://robertu94.github.io/learning/time/</link><pubDate>Sun, 22 Jan 2023 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/time/</guid><description>&lt;p>A few of the key things that you will need as you need as a professional are the ability to manage tasks,
understand how you spend your time, and improve your own processes. For me and many others, journaling,
task managers, and time trackers help you answer these important questions.&lt;/p></description></item><item><title>Learning to Learn: GDB</title><link>https://robertu94.github.io/learning/gdb/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><guid>https://robertu94.github.io/learning/gdb/</guid><description>&lt;p>GDB is a powerful tool that is underutilized by most programmers that I&amp;rsquo;ve met.
It can tell you the state of one or more running or crashed programs, and even manipulate the memory of a running process.
It is an invaluable tool for understanding what is going wrong with your programs.&lt;/p></description></item><item><title>Learning to Learn: MPI</title><link>https://robertu94.github.io/learning/mpi/</link><pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate><guid>https://robertu94.github.io/learning/mpi/</guid><description>&lt;p>MPI is the de-facto standard way to write distributed programs that run on super computers.
Many have tried to replace it, but so far none of them have succeeded.
Learning to use it successfully, will enable you to write powerful distributed programs.&lt;/p></description></item><item><title>Learning to Learn: CMake</title><link>https://robertu94.github.io/learning/cmake/</link><pubDate>Tue, 15 Nov 2022 05:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/cmake/</guid><description>&lt;p>CMake is the de-facto C++ build system used by an overwhelming number of C++ projects.
Even if you personally favor more modern alternatives such as Meson, Bazel, or Pants, if you
ever pull in a 3rd party dependency, there is a good chance that it uses CMake so
knowing enough about CMake to understand it is worth knowing.&lt;/p></description></item><item><title>Suggestions for the Design of Computational Experiments</title><link>https://robertu94.github.io/learning/experiments/</link><pubDate>Tue, 18 Oct 2022 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/experiments/</guid><description>&lt;p>So you want to do empirical computer science? Doing good science is difficult. It requires discipline and attention to detail. However there are strategies that can help you focus on answering the questions you can attempt to answer. First you should ask, “is this a scientific question?” Not all questions are scientific questions. Questions about aesthetics, values, ethics are not science questions. “Is A better than B?” is not a scientific question, it’s a question of values. Questions of values require trade offs, and while important can’t be solved with the scientific method of stating assumptions, posing questions, designing experiments, collecting data, and interpreting results. “Can method A achieve more flops than method B in a given specific context?” Is more of a scientific question.&lt;/p></description></item><item><title>Learning to Learn: High Performance Computing</title><link>https://robertu94.github.io/learning/hpc/</link><pubDate>Sun, 25 Aug 2019 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/hpc/</guid><description>&lt;p>There&amp;rsquo;s at least for me an inherent coolness to be able to say that I can run code on a super computer.
However, there is often a gap between the kind of programming that you learned in your introductory classes, and what kind of code runs well on a computing cluster.
In this post, I try to provide an introduction to high performance computing, and some of the differences between it and personal computing.&lt;/p></description></item><item><title>Learning to Learn: Linux</title><link>https://robertu94.github.io/learning/linux/</link><pubDate>Sun, 25 Aug 2019 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/linux/</guid><description>&lt;p>So you want to or have to try this thing called &amp;ldquo;Linux.&amp;rdquo;
Just like curry powder isn&amp;rsquo;t just one thing, but a distinct mix of spices that come together into a tasty mixture, Linux is much the same.
Also like curry, Linux isn&amp;rsquo;t for everyone.
In this post I describe the process of choosing the &amp;ldquo;flavor&amp;rdquo; of Linux that will work best for you, introduce a powerful tool that will help you to make the most of Linux, and describe some first steps to take when things go wrong.&lt;/p></description></item><item><title>Learning to Learn: Writing</title><link>https://robertu94.github.io/learning/writing/</link><pubDate>Mon, 01 Jul 2019 06:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/writing/</guid><description>&lt;p>Communication is essential to the enterprise of knowledge.
Without communication, we would never be able to build upon the works of others or have them build upon our own.
One of the most important &amp;ndash; and challenging &amp;ndash; arts within communication is writing.
Writing is unique among commutative forms in its durability and portability.
Once written, the words of the author can transcend even their death and travel places they never dreamed to tread.
However writings portability and durability are the same feature that present its central challenge: With the author long gone, how can the he still communicate his or her intent?
In this post, I ponder how I face these challenges and encourage others to do the same.&lt;/p></description></item><item><title>Learning to Learn: Studying New Topics</title><link>https://robertu94.github.io/learning/litrature-review/</link><pubDate>Fri, 12 Apr 2019 11:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/litrature-review/</guid><description>&lt;p>Efficient study of a topic is a powerful skill for a wide variety of domains.
However &amp;ndash; despite having several classes on writing and research in High School and Undergraduate Studies &amp;ndash; it wasn&amp;rsquo;t something that I truly appreciated and learned how to do well until Graduate School.
I think this really boils down to lacking the kind of personal application that makes these efforts meaningful.
However now that I have come to appreciate it, I want to highlight how I think how I study new topics, and how this applies to many topics outside of academic research.&lt;/p></description></item><item><title>Learning to Learn: Python</title><link>https://robertu94.github.io/learning/python/</link><pubDate>Wed, 23 Jan 2019 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/python/</guid><description>&lt;p>Python is a relatively simple language compared to others such as C++. Despite its simplicity, Python really shines because of its robust standard library, extensive 3rd party library ecosystem (especially for statistics and data analysis), and intuitiveness. This post tracks my process of learning how to program well in Python.&lt;/p></description></item><item><title>Learning to Learn: Reading</title><link>https://robertu94.github.io/learning/reading/</link><pubDate>Wed, 08 Aug 2018 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/learning/reading/</guid><description>&lt;p>From time to time, I get questions about how I read and retain as much information as I do. While it is never easy &amp;ndash; especially with dry technical documents &amp;ndash; there are a few strategies that I have learned along the what that I find helpful. In this post I provide some general suggestions along with some that are more useful in computer systems research.&lt;/p></description></item><item><title>Learning to Learn: C++</title><link>https://robertu94.github.io/learning/cpp/</link><pubDate>Fri, 12 Jan 2018 19:00:14 -0500</pubDate><guid>https://robertu94.github.io/learning/cpp/</guid><description>&lt;p>C++ is a huge language. It has tools form imperative, functional, object-oriented, and generic paradigms. And that leaves out the extremely fine control over things like memory allocation strategies in the standard library not generally available elsewhere. In this post, I present my learning path through C++ and offer some suggestions for learning this multi-faceted language.&lt;/p></description></item><item><title>Learning to Learn: Software Patterns</title><link>https://robertu94.github.io/learning/patterns/</link><pubDate>Fri, 12 Jan 2018 19:00:14 -0500</pubDate><guid>https://robertu94.github.io/learning/patterns/</guid><description>&lt;h1 id="foundation-parallel-operations" class="relative group">&lt;strong>Foundation Parallel Operations&lt;/strong> &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#foundation-parallel-operations" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>Fundamental to developing high-performance software is having an understanding of the basics of parallel architecture.&lt;/p></description></item><item><title>Learning to Learn: Intake</title><link>https://robertu94.github.io/learning/intake/</link><pubDate>Mon, 01 Jan 2018 08:00:14 -0500</pubDate><guid>https://robertu94.github.io/learning/intake/</guid><description>&lt;p>From time to time I get questions about how I stay apprised on all of the topics that I know something about. The short answer is a lot of reading and listening.&lt;/p></description></item></channel></rss>