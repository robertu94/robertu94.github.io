---
title: "Exploitable 3: Reverse Engineering"
layout: presentation
location: CU Cyber and Clemson ACM Crossover Seminar
date: 2016-09-01
description: >
  This seminar provides and overview of reverse engineering and how you might use
  it as a developer.  I overview a variety of tools ranging from binary analysis,
  ptrace, kernel tracing tools, and kernel hacking and when to use each.
acknowledgments: Mackenzie Binns collaborated on these slides
...
<section id="exploitable-3" class="title-slide slide level1">
<h1>Exploitable 3</h1>
<p>Reverse Engineering</p>
</section>

<section>
<section id="brought-to-you-by-clemson-acm-and-cucyber" class="title-slide slide level1">
<h1>Brought to you by Clemson ACM and CUCyber</h1>
<p>We’re on <a href="http://steamcommunity.com/groups/clemsonacm">Steam</a> &amp; Freenode! Join #clemsonacm on chat.freenode.net!</p>
</section>
<section id="speakers" class="slide level2">
<h2>Speakers:</h2>
<p>Robert Underwood - ACM Vice President</p>
<p>Mackenzie Binns - CUCyber President</p>
</section></section>
<section id="overview" class="title-slide slide level1">
<h1>Overview</h1>
<ol type="1">
<li>Why reverse engineering?</li>
<li>A word on ethics…</li>
<li>What types of tools exist?
<ol type="1">
<li>Binary analysis (<code>objdump</code>)</li>
<li>User space tracing tools (<code>strace</code>, <code>ltrace</code>)</li>
<li>Ptrace based debuggers (<code>gdb</code>, <code>lldb</code>)</li>
<li>Kernel tracing tools (<code>dtrace</code>, <code>stap</code>)</li>
<li>Kernel hacking</li>
</ol></li>
</ol>
</section>

<section id="why-reverse-engineering" class="title-slide slide level1">
<h1>Why Reverse Engineering?</h1>
<ol type="1">
<li>Determine behavior of untrusted software</li>
<li>Understand performance characteristics</li>
<li>Change existing behavior</li>
<li>Understanding the system</li>
</ol>
</section>

<section id="a-word-on-ethics" class="title-slide slide level1">
<h1>A Word on Ethics…</h1>
<blockquote>
<p>With great power comes great responsibility</p>
</blockquote>
<ul>
<li>Reverse engineering can:
<ul>
<li>facilitate exploit development</li>
<li>help bypass program built-in protections</li>
<li>violate license agreements for proprietary software.</li>
<li>be illegal for some software!</li>
</ul></li>
</ul>
</section>

<section>
<section id="binary-analysis" class="title-slide slide level1">
<h1>Binary Analysis</h1>

</section>
<section id="what-is-binary-analysis" class="slide level2">
<h2>What is Binary Analysis?</h2>
<ul>
<li>What is a computer program?</li>
<li>The life of an executable…</li>
<li>Anatomy of an executable…</li>
<li>Binary analysis is examining the program on disk</li>
</ul>
</section>
<section id="objdump-demo" class="slide level2">
<h2>Objdump Demo</h2>
</section>
<section id="objdump" class="slide level2">
<h2>Objdump</h2>
<ul>
<li><code>-d</code> disassemble</li>
<li><code>-s</code> full dump</li>
<li><code>-t</code> dump symbols and <code>strip</code></li>
<li><code>-r</code> and <code>-R</code> print relocations</li>
</ul>
</section></section>
<section>
<section id="user-space-tracing" class="title-slide slide level1">
<h1>User space Tracing</h1>

</section>
<section id="what-is-user-space-tracing" class="slide level2">
<h2>What is User space Tracing?</h2>
<ul>
<li>Now we have a running program…</li>
<li>What libraries does it call?</li>
<li>What system calls does it make?</li>
<li>What files does it open?</li>
<li>What signals does it send?</li>
</ul>
</section>
<section id="strace-and-ltrace-demos" class="slide level2">
<h2>Strace and Ltrace Demos</h2>
</section>
<section id="strace-and-ltrace" class="slide level2">
<h2>Strace and Ltrace</h2>
<ul>
<li><code>-T</code> timing on calls made</li>
<li>Both support filtering</li>
<li><code>strace</code> and <code>ltrace</code> both use <code>ptrace</code>
<ul>
<li>they are very slow</li>
</ul></li>
</ul>
</section></section>
<section>
<section id="ptrace-debugging" class="title-slide slide level1">
<h1>Ptrace Debugging</h1>

</section>
<section id="what-is-ptrace" class="slide level2">
<h2>What is Ptrace?</h2>
<ul>
<li>What if we could stop and manipulate processes?</li>
<li>Short for “process trace”</li>
<li>What is the value of a variable?</li>
<li>Where did the program segfault?</li>
<li>What value caused the segfault?</li>
</ul>
</section>
<section id="lldb-demo" class="slide level2">
<h2>LLDB Demo</h2>
</section>
<section id="what-are-core-dumps" class="slide level2">
<h2>What are Core Dumps?</h2>
<ul>
<li>Captures state of the program at crash time</li>
<li>Can be triggered by <code>kill</code></li>
<li>Configured via <code>ulimit</code> command</li>
</ul>
</section>
<section id="lldb-core-dump-demo" class="slide level2">
<h2>LLDB Core Dump Demo</h2>
</section>
<section id="other-scenarios" class="slide level2">
<h2>Other Scenarios</h2>
<ul>
<li>What if you want to debug a daemon?</li>
<li>What if you want to run the same commands a lot?</li>
<li>What if you want to set a value?</li>
</ul>
</section>
<section id="lldb-demo-1" class="slide level2">
<h2>LLDB Demo</h2>
</section></section>
<section>
<section id="kernel-tracing" class="title-slide slide level1">
<h1>Kernel Tracing</h1>

</section>
<section id="what-is-kernel-tracing" class="slide level2">
<h2>What is Kernel Tracing?</h2>
<ul>
<li>So far we have been in user space…</li>
<li>We are about to enter a brave new world.</li>
<li>Inspect (and modify) the state of the live kernel</li>
</ul>
</section>
<section id="why-kernel-tracing" class="slide level2">
<h2>Why Kernel Tracing?</h2>
<ul>
<li>What if we need raw device metrics?</li>
<li>What if we can’t wait for ptrace?</li>
<li>What if we can’t recompile</li>
<li>Very hard to stop</li>
</ul>
</section>
<section id="systemtap-demo" class="slide level2">
<h2>SystemTap Demo</h2>
</section>
<section id="systemtap-overview" class="slide level2">
<h2>SystemTap Overview</h2>
<ul>
<li>Inspired by dtrace</li>
<li>Available for most Linux systems</li>
<li>Runtime overview…</li>
</ul>
</section>
<section id="dtrace" class="slide level2">
<h2>Dtrace</h2>
<ul>
<li>Considered the gold standard in tracing</li>
<li>Part of Solaris, FreeBSD, and SmartOS</li>
<li>No special kernel modules</li>
<li>Very similar to SystemTap but faster, safer, and more intuitive
<ul>
<li>No state manipulation</li>
<li>No arbitrary inspection</li>
<li>Limited looping</li>
</ul></li>
</ul>
</section></section>
<section>
<section id="kernel-hacking" class="title-slide slide level1">
<h1>Kernel Hacking</h1>
<blockquote>
<p>Edit, compile… profit?</p>
</blockquote>
</section>
<section id="why-kernel-hacking" class="slide level2">
<h2>Why kernel hacking?</h2>
<ul>
<li>Some things you still can’t see</li>
<li>You want to the kernel to lie</li>
<li>Truly arbitrary state inspection.</li>
<li>Very hard to stop it</li>
</ul>
</section>
<section id="how-to-get-started" class="slide level2">
<h2>How to get started?</h2>
<ul>
<li>Read the source code
<ul>
<li>Linux has very little documentation</li>
<li>Most of the documentation is VERY old.</li>
<li>Entire sections get rewritten frequently</li>
</ul></li>
<li>Look for examples in the kernel
<ul>
<li>ctags, cscope, ag are your friends</li>
</ul></li>
</ul>
</section></section>
<section id="further-resources" class="title-slide slide level1">
<h1>Further Resources</h1>
<ul>
<li>Read the “fantastic” manuals
<ul>
<li><code>lldb</code> has help via the <code>help</code> command</li>
<li><a href="http://lldb.llvm.org/python_reference/index.html">lldb python api</a></li>
<li><a href="https://www.objc.io/issues/19-debugging/lldb-debugging/">lldb tutorial</a></li>
</ul></li>
<li><a href="http://wiki.freebsd.org/Dtrace/One-Liners">dtrace oneliners</a></li>
<li><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/index.html">RedHat guide to stap</a></li>
</ul>
</section>

<section id="questions" class="title-slide slide level1">
<h1>Questions</h1>
<p>Send us feedback at <code>acm@cs.clemson.edu</code>!</p>
<p>This material available under <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC By-SA 4.0</a></p>
</section>
