<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>C++ on systems++</title><link>http://robertu94.github.io/tags/c++.html</link><description>Recent content in C++ on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Nov 2022 05:00:00 -0500</lastBuildDate><atom:link href="http://robertu94.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning to Learn: CMake</title><link>http://robertu94.github.io/learning/cmake.html</link><pubDate>Tue, 15 Nov 2022 05:00:00 -0500</pubDate><guid>http://robertu94.github.io/learning/cmake.html</guid><description>CMake is the de-facto C++ build system used by an overwhelming number of C++ projects. Even if you personally favor more modern alternatives such as Meson, Bazel, or Pants, if you ever pull in a 3rd party dependency, there is a good chance that it uses CMake so knowing enough about CMake to understand it is worth knowing.
How to get started I recommend new users to CMake start with the following resources:</description></item><item><title>Generic Cuda</title><link>http://robertu94.github.io/2018/05/12/generic-cuda.html</link><pubDate>Sat, 12 May 2018 08:00:14 -0500</pubDate><guid>http://robertu94.github.io/2018/05/12/generic-cuda.html</guid><description>GPU programming has the potential to make embarrassingly parallel tasks very quick. But what if you want to perform the same task on a variety of different types? In this post, I walk through a generic testing code that preforms a vector add on GPU and CPU to verify the correctness.
The Test Harness Our main function is pretty simple:
int main(int argc, char* argv[]) { check_type&amp;lt;int&amp;gt;(); check_type&amp;lt;long&amp;gt;(); check_type&amp;lt;double&amp;gt;(); check_type&amp;lt;float&amp;gt;(); return 0; } So how do we write check_type?</description></item><item><title>Learning to Learn: C++</title><link>http://robertu94.github.io/learning/cpp.html</link><pubDate>Fri, 12 Jan 2018 19:00:14 -0500</pubDate><guid>http://robertu94.github.io/learning/cpp.html</guid><description>C++ is a huge language. It has tools form imperative, functional, object-oriented, and generic paradigms. And that leaves out the extremely fine control over things like memory allocation strategies in the standard library not generally available elsewhere. In this post, I present my learning path through C++ and offer some suggestions for learning this multi-faceted language.
Order of Topics This is not intended to be an exhaustive (for that would be far too long), or optimal (for that would be context dependent) listing of the topics, but rather the path that I took through the language.</description></item><item><title>Life with Libtooling</title><link>http://robertu94.github.io/2017/12/10/life-with-libtooling.html</link><pubDate>Sun, 10 Dec 2017 11:21:00 -0500</pubDate><guid>http://robertu94.github.io/2017/12/10/life-with-libtooling.html</guid><description>Over the last two months, I spent a significant amount of time using Clang&amp;rsquo;s libtooling. Libtooling is a great way to quickly develop tools to analyze and modify large quantizes of C++. In this article, I share some lessons learned working with libtooling.
Beware the Stability Guarantees. The biggest problem with libtooling is that it has very few if any Stability guarantees. When I was learning libtooling, I watched Peter Goldsborough&amp;rsquo;s video excellent &amp;ldquo;clang-useful: Building useful tools with LLVM and clang for fun and profit&amp;rdquo;.</description></item><item><title>Qt is for more than just GUIs</title><link>http://robertu94.github.io/2017/05/23/qt-is-for-more-than-just-guis.html</link><pubDate>Tue, 23 May 2017 10:58:14 -0500</pubDate><guid>http://robertu94.github.io/2017/05/23/qt-is-for-more-than-just-guis.html</guid><description>When most people think of Qt, I imagine that they think about the Graphical User Interface components. But Qt has a variety of other components beyond just being a GUI framework. In this post, I highlight some of what I find to be the more interesting features.
Object Communication via Signals and Slots One of the coolest features of Qt is its very clean implementation of signals and slots. Signals and slots are a means of communicating information (called signals) between objects via special callbacks (called slots).</description></item><item><title>Resource Acquisition is Initialization and SDL</title><link>http://robertu94.github.io/2017/05/08/resource-acquisition-is-initialization-and-sdl.html</link><pubDate>Mon, 08 May 2017 05:30:14 -0500</pubDate><guid>http://robertu94.github.io/2017/05/08/resource-acquisition-is-initialization-and-sdl.html</guid><description>Recently, I was working on a project for 2D Game Development where I had to use SDL 2.0. SDL 2.0 is a family of media libraries designed for writing cross platform games in C. However it can be difficult to remember where various resources are allocated and deallocated. Resource Acquisition is Initialization (RAII) is a common pattern in C++ programming that solves this problem. So I wrote a series of wrappers for SDL 2.</description></item><item><title>Smart Pool</title><link>http://robertu94.github.io/2017/04/30/smart-pool.html</link><pubDate>Sun, 30 Apr 2017 09:58:14 -0500</pubDate><guid>http://robertu94.github.io/2017/04/30/smart-pool.html</guid><description>Object Pools are a commonly used pattern used in operating systems, game, and high performance computing development. However just as it can be easy to forget to return a pointer to memory, it can be easy to forget to return the memory to the pool. In this article, I layout a class that I recently used to automatically manage memory from a pool.
The template pool class has 4 parts: an onEmpty policy, an allocation policy, a reset policy, and an object proxy.</description></item></channel></rss>