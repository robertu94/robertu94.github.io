<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>libtooling on systems++</title><link>http://robertu94.github.io/tags/libtooling.html</link><description>Recent content in libtooling on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://robertu94.github.io/tags/libtooling/index.xml" rel="self" type="application/rss+xml"/><item><title>External Clang-Tidy Modules! C++ Refactoring for the Common Project</title><link>http://robertu94.github.io/2023/03/10/external-clang-tidy-modules-c-refactoring-for-the-common-project.html</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/2023/03/10/external-clang-tidy-modules-c-refactoring-for-the-common-project.html</guid><description>Clang style refactoring has been something I&amp;rsquo;ve been admiring from afar for quite a while now. However for a user to actually use it, it has previously required forking llvm to be able to use it in a reasonable fashion because of things like the hack in clang used to locate the resource directory or other fragile hacks like LD_PRELOAD.
Recently, the Clang/LLVM developers vastly improved the situation by allowing loadable clang-tidy modules and by installing all of the headers that you actually need to do something with clang tidy, and they are finally packaged on both Fedora and Ubuntu!</description></item></channel></rss>