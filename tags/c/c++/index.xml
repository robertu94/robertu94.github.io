<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>C/C++ on systems++</title><link>http://robertu94.github.io/tags/c/c++.html</link><description>Recent content in C/C++ on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://robertu94.github.io/tags/c/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>LLVM Tooling for C++</title><link>http://robertu94.github.io/2017/01/22/llvm-tooling-for-c-.html</link><pubDate>Sun, 22 Jan 2017 18:58:14 -0500</pubDate><guid>http://robertu94.github.io/2017/01/22/llvm-tooling-for-c-.html</guid><description>C++ is a both a fantastic language and a mess. It supports at least 4 programming paradigms (procedural, functional, object-oriented, template meta-programming). In some senses, many languages give you one great way to do things: C++ gives you every way and trusts you to use them well. With this flexibility comes problems that C++ seems to have beyond what other languages experience. Therefore, having effective tooling to develop and use C++ is essential.</description></item><item><title>Interpreters Made Easy</title><link>http://robertu94.github.io/2017/01/15/interpreters-made-easy.html</link><pubDate>Sun, 15 Jan 2017 10:14:14 -0500</pubDate><guid>http://robertu94.github.io/2017/01/15/interpreters-made-easy.html</guid><description>The Interpreter pattern from the &amp;ldquo;Design Patterns: Elements of Reusable Object Oriented Software&amp;rdquo; can potentially be a very powerful pattern. It allows you to use a domain specific language to represent a complex computational situation. However, writing interpreters in practice can be tricky and time consuming. It really helps to know something about some fundamental parsing algorithms and techniques.
The most naive approach to writing an interpret involves manually matching each possible next phrase and creating an if else soup to match each possible outcome.</description></item></channel></rss>