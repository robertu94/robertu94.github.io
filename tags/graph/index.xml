<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>graph on systems++</title><link>http://robertu94.github.io/tags/graph.html</link><description>Recent content in graph on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Sep 2017 07:00:00 -0500</lastBuildDate><atom:link href="http://robertu94.github.io/tags/graph/index.xml" rel="self" type="application/rss+xml"/><item><title>Design of A Matrix loading Library</title><link>http://robertu94.github.io/2017/09/23/design-of-a-matrix-loading-library.html</link><pubDate>Sat, 23 Sep 2017 07:00:00 -0500</pubDate><guid>http://robertu94.github.io/2017/09/23/design-of-a-matrix-loading-library.html</guid><description>Ever notice that every matrix and graph library seems to have a different interface for constructing matrices? Also notice that each only only supports some subset of common matrix formats? With a little help from the Adapter and Builder design patterns we can actually solve this problem.
Design Overview In this design, we have 2 main actors: Parser andBuilder as well as their implementations ParserImpl and BuilderImpl. It allows us to write code like this in c++:</description></item></channel></rss>