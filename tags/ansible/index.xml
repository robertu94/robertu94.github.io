<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ansible on Systems++</title><link>https://robertu94.github.io/tags/ansible/</link><description>Recent content in Ansible on Systems++</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 31 Jul 2018 10:00:00 -0500</lastBuildDate><atom:link href="https://robertu94.github.io/tags/ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Management: Common Pitfalls</title><link>https://robertu94.github.io/posts/2018-07-31-configuration-management-pitfalls/</link><pubDate>Tue, 31 Jul 2018 10:00:00 -0500</pubDate><guid>https://robertu94.github.io/posts/2018-07-31-configuration-management-pitfalls/</guid><description>&lt;p>So you know you need a configuration management system and you have an idea of which one will work for you.
So what should I think about about before deploying one of this systems?
In this third and final post in this series, I present some suggestions about using these systems in a way that is flexible and scalable to larger numbers of systems.&lt;/p></description></item><item><title>Configuration Management: the Battle Royal</title><link>https://robertu94.github.io/posts/2018-07-31-configuration-management-comparison/</link><pubDate>Tue, 31 Jul 2018 09:00:00 -0500</pubDate><guid>https://robertu94.github.io/posts/2018-07-31-configuration-management-comparison/</guid><description>&lt;p>So, you need a Configuration Management System, so which one do you choose?
This post is the second in a three part series on configuration management.
In this post, I&amp;rsquo;ll highlight the strengths of these systems and their respective weaknesses.&lt;/p></description></item><item><title>Configuration Management: the Related Systems</title><link>https://robertu94.github.io/posts/2018-07-31-configuration-management-related-systems/</link><pubDate>Tue, 31 Jul 2018 08:00:00 -0500</pubDate><guid>https://robertu94.github.io/posts/2018-07-31-configuration-management-related-systems/</guid><description>&lt;p>Configuration Management Systems like Ansible, Chef, Puppet, and SaltStack are in my opinion are nearly essential if you find yourself managing more than 5 machines.
But what exactly are they, which is better for my circumstances, do I still need them if I use a container based infrastructure, how do I get started?
This post is the first in a series of posts that will attempt to answer these questions.&lt;/p></description></item><item><title>Faster than light</title><link>https://robertu94.github.io/posts/2017-01-29-faster-than-light/</link><pubDate>Sun, 29 Jan 2017 10:06:14 -0500</pubDate><guid>https://robertu94.github.io/posts/2017-01-29-faster-than-light/</guid><description>&lt;p>&lt;a href="https://docs.ansible.com" target="_blank" rel="noreferrer">Ansible&lt;/a> is probably my favorite provisioning and configuration management tool.
Its syntax is concise, expressive, and elegant.
Unlike other tools in its category, it has &lt;a href="https://docs.ansible.com/ansible/playbooks_best_practices.html" target="_blank" rel="noreferrer">excellent documentation&lt;/a> with working examples and intuitive naming.
Learning it use it effectively can help you be a more productive developer.&lt;/p></description></item></channel></rss>