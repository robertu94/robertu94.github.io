<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cuda on Systems++</title><link>https://robertu94.github.io/tags/cuda/</link><description>Recent content in Cuda on Systems++</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 12 May 2018 08:00:14 -0500</lastBuildDate><atom:link href="https://robertu94.github.io/tags/cuda/index.xml" rel="self" type="application/rss+xml"/><item><title>Generic Cuda</title><link>https://robertu94.github.io/posts/2018-05-12-generic-cuda/</link><pubDate>Sat, 12 May 2018 08:00:14 -0500</pubDate><guid>https://robertu94.github.io/posts/2018-05-12-generic-cuda/</guid><description>&lt;p>GPU programming has the potential to make embarrassingly parallel tasks very quick.
But what if you want to perform the same task on a variety of different types?
In this post, I walk through a generic testing code that preforms a vector add on GPU and CPU to verify the correctness.&lt;/p></description></item></channel></rss>