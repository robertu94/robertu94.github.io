<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Templates on systems++</title><link>http://robertu94.github.io/tags/templates.html</link><description>Recent content in Templates on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 Apr 2017 09:58:14 -0500</lastBuildDate><atom:link href="http://robertu94.github.io/tags/templates/index.xml" rel="self" type="application/rss+xml"/><item><title>Smart Pool</title><link>http://robertu94.github.io/2017/04/30/smart-pool.html</link><pubDate>Sun, 30 Apr 2017 09:58:14 -0500</pubDate><guid>http://robertu94.github.io/2017/04/30/smart-pool.html</guid><description>Object Pools are a commonly used pattern used in operating systems, game, and high performance computing development. However just as it can be easy to forget to return a pointer to memory, it can be easy to forget to return the memory to the pool. In this article, I layout a class that I recently used to automatically manage memory from a pool.
The template pool class has 4 parts: an onEmpty policy, an allocation policy, a reset policy, and an object proxy.</description></item></channel></rss>