<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>systems++</title><link>http://robertu94.github.io/guides.html</link><description>Recent content on systems++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://robertu94.github.io/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Spack on Crusher</title><link>http://robertu94.github.io/guides/crusher.html</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/crusher.html</guid><description>tl;dr Put the following in your .bashrc
use_build() { if hostname | grep summit &amp;amp;&amp;gt;/dev/null; then echo &amp;#34;loading crusher spack&amp;#34; module swap PrgEnv-cray PrgEnv-gnu module load craype-accel-amd-gfx90a module load rocm export clustername=crusher fi #other OLCF Machines export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; source $HOME/git/spack-crusher/share/spack/setup-env.sh source $HOME/git/spack-crusher/share/spack/spack-completion.bash } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-crusher source ~/.bashrc spack compiler find First create packages.yaml at ~/.spack/crusher/packages.yaml with:
cmake:externals:- spec:cmake@3.17.0prefix:/usrall:providers:mpi:[cray-mpich]hdf5:externals:- spec:hdf5@1.12.2+mpi+shared+hlprefix:/opt/cray/pe/hdf5-parallel/1.12.1.5/gnu/9.1buildable:Falsecray-mpich:externals:- spec:cray-mpich@8.1.16modules:[cray-mpich/8.1.16, libfabric/1.15.0.0, craype-accel-amd-gfx90a, rocm/5.</description></item><item><title>Spack on Summit</title><link>http://robertu94.github.io/guides/summit.html</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/summit.html</guid><description>tl;dr Put the following in your .bashrc
use_build() { if hostname | grep summit &amp;amp;&amp;gt;/dev/null; then echo &amp;#34;loading summit spack&amp;#34; module load gcc/10.2.0 export clustername=summit fi #other OLCF Machines export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; source $HOME/git/spack-summit/share/spack/setup-env.sh source $HOME/git/spack-summit/share/spack/spack-completion.bash } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-summit source ~/.bashrc spack compiler find First create packages.yaml at ~/.spack/summit/packages.yaml with:
packages:all:providers:mpi:[spectrum-mpi]openssl:externals:- spec:openssl@1.1.1cprefix:/usrbuildable:Falseopenssh:externals:- spec:openssh@8.0p1prefix:/usrbuildable:Falsecuda:externals:- spec:cuda@11.0.221prefix:/sw/summit/cuda/11.0.3buildable:Falsespectrum-mpi:externals:- spec:spectrum-mpi@10.4.0.03rtm4prefix:/sw/summit/spack-envs/base/opt/linux-rhel8-ppc64le/gcc-10.2.0/spectrum-mpi-10.4.0.3-20210112-ht5bw4jruhjujvkzcvpra5lryg5vfhy4buildable:Falsetar:externals:- spec:tar@1.30prefix:/usrcvs:externals:- spec:cvs@1.11.23prefix:/usrdiffutils:externals:- spec:diffutils@3.6prefix:/usrgroff:externals:- spec:groff@1.22.3prefix:/usrbison:externals:- spec:bison@3.0.4prefix:/usrgawk:externals:- spec:gawk@4.2.1prefix:/usrpkgconf:externals:- spec:pkgconf@1.4.2prefix:/usrm4:externals:- spec:m4@1.</description></item><item><title>How to export a C API from a C++ code</title><link>http://robertu94.github.io/guides/exporting_c.html</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/exporting_c.html</guid><description>tl;dr define a version of your API using only C compatible types in a header Do NOT include a C++ header in the transitive set of headers make the header compatible with C and C++ using #ifdef __cplusplus and extern &amp;quot;C&amp;quot; Why is this needed C++ is (mostly) a super set of C. If you want C++ to be callable from C, you need to stick to this subset for the declaring code and mark the functions as having a C ABI.</description></item><item><title>How to add a dependency in CMake</title><link>http://robertu94.github.io/guides/cmake_deps.html</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/cmake_deps.html</guid><description>tl;dr Most of the time simply use find_package, set CMAKE_PREFIX_PATH to include the path specified in CMAKE_INSTALL_PREFIX when the package was installed like so:
find_package(std_compat REQUIRED)target_link_libraries(my_library PUBLIC std_compat::std_compat)Tools like spack will set CMAKE_PREFIX_PATH for you. Otherwise specify it using an envionment variable or with a -D flag to cmake.
How to add the dependency Adding a dependency in CMake is pretty straight forward, but depends on where it is coming from.</description></item><item><title>Updating LibPressio with Spack</title><link>http://robertu94.github.io/guides/updating_libpressio_with_spack.html</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/updating_libpressio_with_spack.html</guid><description>#tl;dr
# set NEW_VERSION to the desired version cd $SPACK_ROOT git pull cd $(spack repo list | grep robertu94 | sed -E &amp;#39;s/robertu94[[:space:]]+//&amp;#39;) &amp;amp;&amp;amp; git pull spack install libpressio-tools ^libpressio${NEW_VERSION} spack load libpressio-tools ^libpressio${NEW_VERSION} libpressio is now Mainline LibPressio is now in the mainline version of spack (as of commit da6aeaad44e434da5563d32f2fa9900de362b2ed, October 17, 2022). You no longer need to add robertu94_packages unless you need a development version. You can either spack repo rm robertu94, or the next pull of robertu94_packages will include a dummy package to refer back to the builtin version.</description></item><item><title>Shortcut Guide for Configuring Spack for a New HPC System</title><link>http://robertu94.github.io/guides/spack.html</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/spack.html</guid><description>Setting up spack The way that I use spack, there are 6 major steps to configuring spack:
Determine what system compiler, python, and MPI you will use Telling spack how to find your compiler Telling spack find major system dependencies such as MPI and OpenSSL as external dependencies Configuring preferred providers for virtual dependencies and target architectures Configuring spack to use a binary cache if it will matter Setting up a shell shortcut for loading spack What system dependencies to use Spack does a pretty good job &amp;ldquo;living off the land&amp;rdquo; using what ever dependencies you may need.</description></item><item><title>Spack on Bebop</title><link>http://robertu94.github.io/guides/bebop.html</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/bebop.html</guid><description>tl;dr Put the following in your .bashrc
use_build() { if hostname | grep bebop &amp;amp;&amp;gt;/dev/null; then echo &amp;#34;loading bebop spack&amp;#34; module load gcc/10.2.0-z53hda3 module load intel-mpi/2019.10.317-qn674hj module load intel-mkl/2020.4.304 source $HOME/git/spack-bebop/share/spack/setup-env.sh source $HOME/git/spack-bebop/share/spack/spack-completion.bash export clustername=bebop fi #other LCRC Machines export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-bebop git clone https://github.com/robertu94/spack_packages git/robertu94_packages source ~/.bashrc spack compiler find # for extra packages like libpressio spack repo add ~/git/robertu94_packages First create packages.</description></item><item><title>Spack on Cooley</title><link>http://robertu94.github.io/guides/cooley.html</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/cooley.html</guid><description>tl;dr Put the following in your .bashrc
function use_build { # other ALCF machines if hostname | grep cooley &amp;amp;&amp;gt;/dev/null || hostname | grep cc &amp;amp;&amp;gt; /dev/null; then soft add +gcc-8.2.0 soft add +cmake-3.20.4 soft add +cuda-11.0.2 soft add +mvapich2 source ${HOME}/git/spack-cooley/share/spack/setup-env.sh export clustername=cooley fi export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-cooley git clone https://github.com/robertu94/spack_packages git/robertu94_packages source ~/.bashrc use_build spack compiler find # for extra packages like libpressio spack repo add ~/git/robertu94_packages First create packages.</description></item><item><title>Spack on Polaris</title><link>http://robertu94.github.io/guides/polaris.html</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/polaris.html</guid><description>tl;dr Put the following in your .bashrc
function use_build { # other ALCF machines if hostname -f | grep polaris &amp;amp;&amp;gt;/dev/null; then echo &amp;#34;loading polaris spack&amp;#34; module swap PrgEnv-nvhpc PrgEnv-gnu module load cudatoolkit-standalone source ${HOME}/git/spack-theta/share/spack/setup-env.sh export CRAYPE_LINK_TYPE=dynamic export clustername=polaris fi export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-polaris git clone https://github.com/robertu94/spack_packages git/robertu94_packages git clone https://github.com/mochi-hpc/mochi-spack-packages git/mochi-spack-packages source ~/.bashrc use_build spack compiler find # for extra packages like libpressio and thallium spack repo add ~/git/robertu94_packages spack repo add ~/git/mochi-spack-packages First create packages.</description></item><item><title>Spack on Theta</title><link>http://robertu94.github.io/guides/theta.html</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>http://robertu94.github.io/guides/theta.html</guid><description>tl;dr Put the following in your .bashrc
function use_build { # other ALCF machines if hostname | grep theta &amp;amp;&amp;gt;/dev/null; then echo &amp;#34;loading theta spack&amp;#34; module swap PrgEnv-intel PrgEnv-gnu module swap gcc/11.2.0 source ${HOME}/git/spack-theta/share/spack/setup-env.sh export CRAYPE_LINK_TYPE=dynamic export clustername=theta export HTTP_PROXY=http://theta-proxy.tmi.alcf.anl.gov:3128 export HTTPS_PROXY=http://theta-proxy.tmi.alcf.anl.gov:3128 export http_proxy=http://theta-proxy.tmi.alcf.anl.gov:3128 export https_proxy=http://theta-proxy.tmi.alcf.anl.gov:3128 fi export SPACK_USER_CONFIG_PATH=&amp;#34;$HOME/.spack/$clustername&amp;#34; export SPACK_USER_CACHE_PATH=&amp;#34;$SPACK_USER_CONFIG_PATH&amp;#34; } Then run
mkdir -p ~/git git clone https://github.com/spack/spack git/spack-theta git clone https://github.com/robertu94/spack_packages git/robertu94_packages git clone https://github.com/mochi-hpc/mochi-spack-packages git/mochi-spack-packages source ~/.</description></item></channel></rss>